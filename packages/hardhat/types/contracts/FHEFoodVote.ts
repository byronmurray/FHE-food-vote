/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FHEFoodVoteInterface extends Interface {
  getFunction(
    nameOrSignature: "getEncryptedVotes" | "hasVoted" | "protocolId" | "vote"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "FoodVoted"): EventFragment;

  encodeFunctionData(
    functionFragment: "getEncryptedVotes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getEncryptedVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace FoodVotedEvent {
  export type InputTuple = [
    voter: AddressLike,
    country: string,
    foodId: BigNumberish
  ];
  export type OutputTuple = [voter: string, country: string, foodId: bigint];
  export interface OutputObject {
    voter: string;
    country: string;
    foodId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FHEFoodVote extends BaseContract {
  connect(runner?: ContractRunner | null): FHEFoodVote;
  waitForDeployment(): Promise<this>;

  interface: FHEFoodVoteInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getEncryptedVotes: TypedContractMethod<
    [country: string, foodId: BigNumberish],
    [string],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [arg0: AddressLike, arg1: string],
    [boolean],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  vote: TypedContractMethod<
    [
      country: string,
      foodId: BigNumberish,
      encryptedVote: BytesLike,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getEncryptedVotes"
  ): TypedContractMethod<
    [country: string, foodId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<[arg0: AddressLike, arg1: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [
      country: string,
      foodId: BigNumberish,
      encryptedVote: BytesLike,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FoodVoted"
  ): TypedContractEvent<
    FoodVotedEvent.InputTuple,
    FoodVotedEvent.OutputTuple,
    FoodVotedEvent.OutputObject
  >;

  filters: {
    "FoodVoted(address,string,uint256)": TypedContractEvent<
      FoodVotedEvent.InputTuple,
      FoodVotedEvent.OutputTuple,
      FoodVotedEvent.OutputObject
    >;
    FoodVoted: TypedContractEvent<
      FoodVotedEvent.InputTuple,
      FoodVotedEvent.OutputTuple,
      FoodVotedEvent.OutputObject
    >;
  };
}
