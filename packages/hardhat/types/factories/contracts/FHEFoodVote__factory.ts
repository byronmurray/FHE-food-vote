/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  FHEFoodVote,
  FHEFoodVoteInterface,
} from "../../contracts/FHEFoodVote";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "country",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "foodId",
        type: "uint256",
      },
    ],
    name: "FoodVoted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "country",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "foodId",
        type: "uint256",
      },
    ],
    name: "getEncryptedVotes",
    outputs: [
      {
        internalType: "euint32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "hasVoted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "country",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "foodId",
        type: "uint256",
      },
      {
        internalType: "externalEuint32",
        name: "encryptedVote",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f5ffd5b5061018a6100ae604080516080810182525f808252602082018190529181018290526060810191909152506040805160808101825273687820221192c5b662b25367f70076a37bc79b6c815273848b0066793bcc60346da1f49049357399b8d595602082015273a02cda4ca3a71d7c46997716f4283aa851c2881291810191909152731364cbbf2cdf5032c47d8226a6f6fbd2afcdacac606082015290565b80517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970080546001600160a01b03199081166001600160a01b039384161790915560208301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497018054831691841691909117905560408301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497028054831691841691909117905560608301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497038054909216921691909117905550565b6109e2806101975f395ff3fe608060405234801561000f575f5ffd5b506004361061004a575f3560e01c80631bbf6fdb1461004e5780637b25e4e514610063578063c684706014610089578063da1f12ab146100d7575b5f5ffd5b61006161005c36600461073b565b6100df565b005b6100766100713660046107bd565b610302565b6040519081526020015b60405180910390f35b6100c7610097366004610819565b600160209081525f9283526040909220815180830184018051928152908401929093019190912091525460ff1681565b6040519015158152602001610080565b612711610076565b335f908152600160205260409081902090516100fe90889088906108ea565b9081526040519081900360200190205460ff16156101625760405162461bcd60e51b815260206004820152601e60248201527f416c726561647920766f74656420666f72207468697320636f756e7472790000604482015260640160405180910390fd5b5f6101a28484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061033c92505050565b90506101dc5f88886040516101b89291906108ea565b90815260200160405180910390205f8781526020019081526020015f205482610349565b5f88886040516101ed9291906108ea565b90815260408051602092819003830181205f8a815293529082209290925561023f9161021c908a908a906108ea565b90815260200160405180910390205f8781526020019081526020015f2054610377565b506102785f88886040516102549291906108ea565b90815260200160405180910390205f8781526020019081526020015f205433610386565b50335f90815260016020819052604091829020915190919061029d908a908a906108ea565b908152604051908190036020018120805492151560ff199093169290921790915533907f0a44bae283819eabcac3f911ba82927090bd9e428789736a289e65a52269ba69906102f1908a908a908a906108f9565b60405180910390a250505050505050565b5f5f84846040516103149291906108ea565b90815260200160405180910390205f8381526020019081526020015f205490505b9392505050565b5f61033583836004610398565b5f8261035b576103585f6104b8565b92505b8161036c576103695f6104b8565b91505b61033583835f6104d0565b5f61038282306105b0565b5090565b5f61039183836105b0565b5090919050565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497015460405163196d0b9b60e01b81525f917f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700916001600160a01b039091169063196d0b9b90610411908890339089908990600401610950565b6020604051808303815f875af115801561042d573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061045191906109aa565b8154604051630f8e573b60e21b8152600481018390523360248201529193506001600160a01b031690633e395cec906044015f604051808303815f87803b15801561049a575f5ffd5b505af11580156104ac573d5f5f3e3d5ffd5b50505050509392505050565b5f6104ca8263ffffffff166004610639565b92915050565b5f5f82156104e35750600160f81b6104e6565b505f5b5f7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700600181015460405163022f65e760e31b815260048101899052602481018890527fff00000000000000000000000000000000000000000000000000000000000000851660448201529192506001600160a01b03169063117b2f38906064016020604051808303815f875af1158015610582573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105a691906109aa565b9695505050505050565b5f7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497008054604051635ca4b5b160e11b8152600481018690526001600160a01b03858116602483015292935091169063b9496b62906044015f604051808303815f87803b15801561061e575f5ffd5b505af1158015610630573d5f5f3e3d5ffd5b50505050505050565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970154604051639cd07acb60e01b81525f917f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700916001600160a01b0390911690639cd07acb906106ae90879087906004016109c1565b6020604051808303815f875af11580156106ca573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106ee91906109aa565b949350505050565b5f5f83601f840112610706575f5ffd5b50813567ffffffffffffffff81111561071d575f5ffd5b602083019150836020828501011115610734575f5ffd5b9250929050565b5f5f5f5f5f5f60808789031215610750575f5ffd5b863567ffffffffffffffff811115610766575f5ffd5b61077289828a016106f6565b9097509550506020870135935060408701359250606087013567ffffffffffffffff81111561079f575f5ffd5b6107ab89828a016106f6565b979a9699509497509295939492505050565b5f5f5f604084860312156107cf575f5ffd5b833567ffffffffffffffff8111156107e5575f5ffd5b6107f1868287016106f6565b909790965060209590950135949350505050565b634e487b7160e01b5f52604160045260245ffd5b5f5f6040838503121561082a575f5ffd5b82356001600160a01b0381168114610840575f5ffd5b9150602083013567ffffffffffffffff81111561085b575f5ffd5b8301601f8101851361086b575f5ffd5b803567ffffffffffffffff81111561088557610885610805565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156108b4576108b4610805565b6040528181528282016020018710156108cb575f5ffd5b816020840160208301375f602083830101528093505050509250929050565b818382375f9101908152919050565b60408152826040820152828460608301375f606084830101525f6060601f19601f8601168301019050826020830152949350505050565b6054811061094c57634e487b7160e01b5f52602160045260245ffd5b9052565b8481526001600160a01b0384166020820152608060408201525f8351806080840152806020860160a085015e5f60a0828501015260a0601f19601f8301168401019150506109a16060830184610930565b95945050505050565b5f602082840312156109ba575f5ffd5b5051919050565b82815260408101610335602083018461093056fea164736f6c634300081b000a";

type FHEFoodVoteConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FHEFoodVoteConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FHEFoodVote__factory extends ContractFactory {
  constructor(...args: FHEFoodVoteConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      FHEFoodVote & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FHEFoodVote__factory {
    return super.connect(runner) as FHEFoodVote__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FHEFoodVoteInterface {
    return new Interface(_abi) as FHEFoodVoteInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): FHEFoodVote {
    return new Contract(address, _abi, runner) as unknown as FHEFoodVote;
  }
}
